// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STAFF
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  status    UserStatus @default(INACTIVE)
  department String? @default("Not Assigned")
  isFirstLogin Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  addresses Address[]
  orders    Order[]
  cartItems CartItem[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  category    String?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  pricing     Pricing[]
  cartItems   CartItem[]
}

model Pricing {
  id         Int      @id @default(autoincrement())
  productId  Int
  basePrice  Float
  discount   Float?
  startDate  DateTime
  endDate    DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
}

model Address {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  name      String
  phone     String
  pincode   String
  address1  String
  address2  String?
  city      String
  state     String
  country   String   @default("India")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Order {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  items      Json     // [{ productId, name, price, quantity }]
  total      Int      // in paise (for Razorpay)
  status     String   // e.g. "PAID", "PENDING", "FAILED"
  paymentId  String?
  addressId  Int
  address    Address  @relation(fields: [addressId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  status    String   @default("unread") // 'read' or 'unread'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 